class Solution {
    public int[] intersect(int[] nums1, int[] nums2) {
        // 将一个数组中的元素加入 map
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums1.length; i++) {
            int tmp = map.getOrDefault(nums1[i], 0);
            map.put(nums1[i], tmp + 1);
        }
        // 由于 map 遍历得到 key 的值比较难，所以我们需要借助 List 
        List<Integer> list = new ArrayList<>();
        for (int j = 0; j < nums2.length; j++) {
            Integer count = map.get(nums2[j]);
            if (count != null && count != 0) {
                list.add(nums2[j]);
                // 注意这里写成 count - 1 也可以，
                // 但是执行用时和内存消耗比 --count 要大的多
                map.put(nums2[j], --count);
            }
        }
        // 将 List 中的元素加入至新数组
        int[] res = new int[list.size()];
        for (int k = 0; k < list.size(); k++) {
            res[k] = list.get(k);
        }
        return res;
    }
}
